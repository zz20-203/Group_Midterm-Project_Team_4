
package UserInterface.WorkAreas.StudentRole;

import info5100.university.example.Department.Department;
import info5100.university.example.Persona.StudentProfile;
import info5100.university.example.CourseSchedule.CourseLoad;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseCatalog.Course;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;


/**
 *
 * @author shaoweili
 */
public class TranscriptJPanel extends javax.swing.JPanel {
    private final JPanel main;
    private final Department dept;
    private final String personId;
    private String semester;  

    /**
     * Creates new form TranscriptJPanel
     */
    public TranscriptJPanel(JPanel main, Department dept, String personId, String semester) {
        this.main = main;
        this.dept = dept;
        this.personId = personId;
        this.semester = semester;
        
        initComponents();
        
        txtCurrentGpa.setEditable(false);
        
        // show just the chosen semester
        cmbSemester.removeAllItems();
        if (semester != null) cmbSemester.addItem(semester);
        if (cmbSemester.getItemCount() > 0) cmbSemester.setSelectedIndex(0);

        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSemester = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTranscript = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        lblGpa = new javax.swing.JLabel();
        txtCurrentGpa = new javax.swing.JTextField();
        lblTranscriptDetails = new javax.swing.JLabel();

        lblSemester.setText("Semester");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        tblTranscript.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Course", "Credit", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTranscript);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblGpa.setText("GPA");

        lblTranscriptDetails.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblTranscriptDetails.setText("Transcript Details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGpa, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbSemester, 0, 136, Short.MAX_VALUE)
                                    .addComponent(txtCurrentGpa)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(352, 352, 352)
                        .addComponent(lblTranscriptDetails)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSemester)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCurrentGpa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGpa))
                .addGap(26, 26, 26)
                .addComponent(lblTranscriptDetails)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(162, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        // TODO add your handling code here:
        loadTable();
    }//GEN-LAST:event_cmbSemesterActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        ((CardLayout) main.getLayout()).previous(main);
        
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblGpa;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblTranscriptDetails;
    private javax.swing.JTable tblTranscript;
    private javax.swing.JTextField txtCurrentGpa;
    // End of variables declaration//GEN-END:variables

    private void loadTable() {
        /// Table and GPA for the selected semester
        String sem = (String) cmbSemester.getSelectedItem();
        if (sem == null || dept == null) return;

        StudentProfile sp = dept.getStudentDirectory().findStudent(personId);
        if (sp == null) return;

        CourseLoad cl = sp.getCourseLoadBySemester(sem);
        DefaultTableModel m = (DefaultTableModel) tblTranscript.getModel();
        m.setRowCount(0);

        if (cl == null) { txtCurrentGpa.setText("-"); return; }

        double gpSum = 0.0;
        int gradedCredits = 0;

        for (SeatAssignment sa : cl.getSeatAssignments()) {
            CourseOffer co = sa.getCourseOffer();
            Course c = (co == null) ? null : co.getSubjectCourse();
            int credits = safeCredits(c);

            String grade = "-";
            try { grade = String.valueOf(sa.getClass().getMethod("getGrade").invoke(sa)); }
            catch (Exception ignore) { }

            String courseName = (c == null) ? "(unknown)" : (c.getName() + " (" + c.getCourseNumber() + ")");
            m.addRow(new Object[]{ courseName, credits, grade });

            double pts = letterToPoints(grade);
            if (pts >= 0) { gpSum += pts * credits; gradedCredits += credits; }
        }

        txtCurrentGpa.setText(gradedCredits == 0 ? "-" : String.format("%.2f", gpSum / gradedCredits));
    }

    private int safeCredits(Course c) {return c == null ? 0 : c.getCredits();}

    private double letterToPoints(String grade) {
        if (grade == null) return 0.0;
        switch (grade.trim().toUpperCase()) {
            case "A":  return 4.0;
            case "A-": return 3.7;
            case "B+": return 3.3;
            case "B":  return 3.0;
            case "B-": return 2.7;
            case "C+": return 2.3;
            case "C":  return 2.0;
            case "C-": return 1.7;
            case "D":  return 1.0;
            case "F":  return 0.0;
            default:   return 0.0; 
        
    }   
        
    }
}
