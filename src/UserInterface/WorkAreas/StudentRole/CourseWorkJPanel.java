
package UserInterface.WorkAreas.StudentRole;

import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.PersonDirectory;
import info5100.university.example.Persona.StudentDirectory;
import info5100.university.example.Persona.StudentProfile;
import info5100.university.example.CourseSchedule.CourseLoad;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.Department.Department;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author shaoweili
 */
public class CourseWorkJPanel extends javax.swing.JPanel {
    private final JPanel workArea;
    private final Department dept;
    private final String personId;
    
    private final Map<String, Submission> submissionStore = new HashMap<>();
    private final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
    
    

    /**
     * Creates new form CourseWorkJPanel
     */
    public CourseWorkJPanel(JPanel workArea, Department dept, String personId) {
        this.workArea = workArea;
        this.dept = dept;
        this.personId = personId;
        initComponents();
        
        //semester select
        cmbSemester.removeAllItems();
        cmbSemester.addItem("Fall2025");
        cmbSemester.addItem("Spring2026");
        cmbSemester.setSelectedIndex(0);
        
        //set up the spinner between 0..100
        spnProgress.setModel(new SpinnerNumberModel(0, 0, 100, 5));
        
        loadTable();
    }
    
    private void setStatus(String s) {System.out.println("[CourseWork] " + s);}
    
    private StudentProfile getOrCreateModelStudent() {
        PersonDirectory pd = dept.getPersonDirectory();
        Person mp = pd.findPerson(personId);
        if (mp == null) mp = pd.newPerson(personId);

        StudentDirectory sd = dept.getStudentDirectory();
        StudentProfile sp = sd.findStudent(personId);
        if (sp == null) sp = sd.newStudentProfile(mp);
        return sp;
    }
    
    private String keyOf(String semester, String courseNumber) {
        return semester + "|" + courseNumber;
    }
    
    private static class Submission {
        String fileName = "";
        long   timestamp = 0L;
        int    progress  = 0;
    }

    private String getSelectedCourseNumber() {
        int row = tblCourses.getSelectedRow();
        return (row < 0) ? null : String.valueOf(tblCourses.getValueAt(row, 0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSemester = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourses = new javax.swing.JTable();
        btnSubmit = new javax.swing.JButton();
        btnSetProgress = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();
        spnProgress = new javax.swing.JSpinner();
        btnBack = new javax.swing.JButton();
        lblManageCourseWork = new javax.swing.JLabel();

        lblSemester.setText("Semester");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        tblCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course", "Name", "Progress", "Last Submitted"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourses);

        btnSubmit.setText("Submit");
        btnSubmit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnSetProgress.setText("Set Progress");
        btnSetProgress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSetProgress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetProgressActionPerformed(evt);
            }
        });

        btnReload.setText("Reload table");
        btnReload.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblManageCourseWork.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblManageCourseWork.setText("Manage Course Work");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReload)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnSubmit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSetProgress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(spnProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(330, 330, 330)
                        .addComponent(lblManageCourseWork)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSemester)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(35, 35, 35)
                .addComponent(lblManageCourseWork)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnSubmit)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSetProgress)
                    .addComponent(spnProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnReload)
                .addContainerGap(141, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        String sem  = String.valueOf(cmbSemester.getSelectedItem());
        String cnum = getSelectedCourseNumber();
        if (cnum == null) {
            JOptionPane.showMessageDialog(this, "Select a course to submit.");
            return;
        }

        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;

        File f = fc.getSelectedFile();
        String key = keyOf(sem, cnum);
        Submission s = submissionStore.getOrDefault(key, new Submission());
        s.fileName  = f.getName();
        s.timestamp = System.currentTimeMillis();
        submissionStore.put(key, s);

        loadTable();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnSetProgressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetProgressActionPerformed
        // TODO add your handling code here:
        String sem  = String.valueOf(cmbSemester.getSelectedItem());
        String cnum = getSelectedCourseNumber();
        if (cnum == null) {
            JOptionPane.showMessageDialog(this, "Select a course to set progress.");
            return;
        }

        int p = (Integer) spnProgress.getValue(); // 0..100
        String key = keyOf(sem, cnum);
        Submission s = submissionStore.getOrDefault(key, new Submission());
        s.progress = p;
        submissionStore.put(key, s);

        loadTable();
    }//GEN-LAST:event_btnSetProgressActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        // TODO add your handling code here:
        loadTable();
    }//GEN-LAST:event_btnReloadActionPerformed

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        // TODO add your handling code here:
        loadTable();
    }//GEN-LAST:event_cmbSemesterActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        if (workArea != null) {
        ((java.awt.CardLayout) workArea.getLayout()).previous(workArea);
        } 
        
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnSetProgress;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblManageCourseWork;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JSpinner spnProgress;
    private javax.swing.JTable tblCourses;
    // End of variables declaration//GEN-END:variables

    private void loadTable() {
        DefaultTableModel m = (DefaultTableModel) tblCourses.getModel();
        m.setRowCount(0);

        String sem = String.valueOf(cmbSemester.getSelectedItem());
        StudentProfile sp = getOrCreateModelStudent();
        CourseLoad cl = sp.getCourseLoadBySemester(sem);
        if (cl == null) return;

        for (SeatAssignment sa : cl.getSeatAssignments()) {
            CourseOffer co = sa.getCourseOffer();
            String cnum  = co.getCourseNumber();
            String cname = co.getSubjectCourse().getName();

            Submission sub = submissionStore.get(keyOf(sem, cnum));
            String progressStr = (sub == null) ? "0" : String.valueOf(sub.progress);
            String last = (sub == null || sub.timestamp == 0)
                    ? ""
                    : (sdf.format(new Date(sub.timestamp)) + " • " + sub.fileName);

            m.addRow(new Object[]{cnum, cname, progressStr, last});
          
        }

    }
}
