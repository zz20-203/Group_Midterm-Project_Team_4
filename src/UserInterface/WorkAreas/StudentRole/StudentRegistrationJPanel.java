
package UserInterface.WorkAreas.StudentRole;

import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.PersonDirectory;
import info5100.university.example.Persona.StudentDirectory;
import info5100.university.example.Persona.StudentProfile;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseLoad;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.Department.Department; 

import javax.swing.JPanel;                                
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;
import javax.swing.JOptionPane;

public class StudentRegistrationJPanel extends javax.swing.JPanel {
    private final JPanel workArea;
    private final Department dept;
    private final String personId;
    private final String homeCard;

    
    //get schedule for a semester
    private CourseSchedule scheduleFor(String sem) {
        return (dept == null ? null : dept.getCourseSchedule(sem));
    }
    
    //check seats left on an offering course
    private int seatsLeft(CourseOffer co) {
        return co.getEmptySeatCount();
    }
    
     private boolean alreadyEnrolled(CourseLoad cl, String courseNumber) {
        if (cl == null) return false;
        for (SeatAssignment sa : cl.getSeatAssignments()) {
            CourseOffer co = sa.getCourseOffer();
            if (co != null && courseNumber.equals(co.getCourseNumber())) return true;
        }
        return false;
    }

    
    public StudentRegistrationJPanel(JPanel workArea, Department dept, String personId, String homeCard) {
        this.workArea = workArea;
        this.dept = dept;
        this.personId = personId;
        this.homeCard = homeCard;
        
        initComponents();
        
        //initialize the semester list in comboBox
        cmbSemester.removeAllItems();
        cmbSemester.addItem("Fall2025");
        cmbSemester.addItem("Spring2026");
        cmbSemester.setSelectedIndex(0);
        
        //first load of both tables
        loadAvailable();
        loadEnrolled();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSemester = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        btnBack = new javax.swing.JButton();
        lblAvailable = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEnrolled = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAvailable1 = new javax.swing.JTable();
        lblEnrolled = new javax.swing.JLabel();
        btnDrop = new javax.swing.JButton();
        btnEnroll = new javax.swing.JButton();

        lblSemester.setText("Semester");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblAvailable.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblAvailable.setText("Available Offerings");

        tblEnrolled.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Course", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEnrolled);

        tblAvailable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Course", "Name", "Seats Left"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblAvailable1);
        if (tblAvailable1.getColumnModel().getColumnCount() > 0) {
            tblAvailable1.getColumnModel().getColumn(2).setResizable(false);
            tblAvailable1.getColumnModel().getColumn(2).setHeaderValue("Seats Left");
        }

        lblEnrolled.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblEnrolled.setText("My Enrollments");

        btnDrop.setText("Drop Course");
        btnDrop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        btnEnroll.setText("Enroll Course");
        btnEnroll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEnrolled)
                    .addComponent(lblAvailable)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSemester)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(18, 18, 18)
                                .addComponent(btnDrop)
                                .addGap(18, 18, 18)
                                .addComponent(btnEnroll))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSemester)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(lblAvailable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEnrolled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDrop)
                    .addComponent(btnEnroll)
                    .addComponent(btnBack))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        // TODO add your handling code here:
        loadAvailable();
        loadEnrolled();
        
    }//GEN-LAST:event_cmbSemesterActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        //wire the back button to Student Portal panel
        if (workArea != null && homeCard != null) {
        ((CardLayout) workArea.getLayout()).show(workArea, homeCard);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollActionPerformed
        // TODO add your handling code here:
        // must select an offering from "Available Offerings"
        int row = tblAvailable1.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select an offering to enroll.", "No selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // semester + course number from UI
        final String sem  = String.valueOf(cmbSemester.getSelectedItem());
        final String cnum = String.valueOf(tblAvailable1.getValueAt(row, 0));

        // confirm
        int rc = JOptionPane.showConfirmDialog(
            this, "Enroll in " + cnum + " for " + sem + "?", "Confirm enrollment", JOptionPane.YES_NO_OPTION);
        if (rc != JOptionPane.YES_OPTION) return;

        // get student course load for the semester
        info5100.university.example.Persona.StudentProfile sp = getOrCreateModelStudent();
        info5100.university.example.CourseSchedule.CourseLoad cl = sp.getCourseLoadBySemester(sem);
        if (cl == null) cl = sp.newCourseLoad(sem);

        // avoid duplicate enrollments
        if (alreadyEnrolled(cl, cnum)) {
            JOptionPane.showMessageDialog(this, "You are already enrolled in " + cnum + " (" + sem + ").",
                "Duplicate", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // IMPORTANT: use the EXISTING schedule; do NOT create a new one
        info5100.university.example.CourseSchedule.CourseSchedule cs = scheduleFor(sem);
        if (cs == null) {
            JOptionPane.showMessageDialog(this, "No schedule found for " + sem + ".", "Not found", JOptionPane.ERROR_MESSAGE);
            return;
        }

        info5100.university.example.CourseSchedule.CourseOffer co = cs.getCourseOffer(cnum);
        if (co == null) {
            JOptionPane.showMessageDialog(this, "That offering is no longer available.", "Not found", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check seat availability (will return null when no empty seat)
        if (co.getEmptySeat() == null) {
            JOptionPane.showMessageDialog(this, "No seats left in " + cnum + ".", "Full", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // enroll
        cl.newSeatAssignment(co);

        JOptionPane.showMessageDialog(this, "Enrolled in " + cnum + " (" + sem + ").",
            "Success", JOptionPane.INFORMATION_MESSAGE);

        // refresh both tables
        loadAvailable();
        loadEnrolled();
     
    }//GEN-LAST:event_btnEnrollActionPerformed

    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
        // TODO add your handling code here:
        int row = tblEnrolled.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select a course to drop.", "No selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String sem  = String.valueOf(cmbSemester.getSelectedItem());
        String cnum = String.valueOf(tblEnrolled.getValueAt(row, 0));

        int rc = JOptionPane.showConfirmDialog(
                this, "Drop " + cnum + " from " + sem + "?", "Confirm drop",JOptionPane.YES_NO_OPTION
        );
        if (rc != JOptionPane.YES_OPTION) return;
        
        // Do the drop function
        info5100.university.example.Persona.StudentProfile sp = getOrCreateModelStudent();
        info5100.university.example.CourseSchedule.CourseLoad cl = sp.getCourseLoadBySemester(sem);
        if (cl == null) {
            JOptionPane.showMessageDialog(this, "You are not enrolled this term.", "Nothing to drop", JOptionPane.WARNING_MESSAGE);
            return;
        }

        info5100.university.example.CourseSchedule.SeatAssignment toRemove = null;
        for (info5100.university.example.CourseSchedule.SeatAssignment sa : cl.getSeatAssignments()) {
            String number = sa.getCourseOffer().getSubjectCourse().getCourseNumber();
            if (cnum.equals(number)) { toRemove = sa; break; }
        }
        if (toRemove == null) {
            JOptionPane.showMessageDialog(this, "Could not find that enrollment.", "Not found", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //remove the seat
        cl.getSeatAssignments().remove(toRemove);
        
        JOptionPane.showMessageDialog(this, "Dropped " + cnum + " (" + sem + ").", "Success", JOptionPane.INFORMATION_MESSAGE);

        loadAvailable();
        loadEnrolled();
        
    }//GEN-LAST:event_btnDropActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAvailable;
    private javax.swing.JLabel lblEnrolled;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JTable tblAvailable1;
    private javax.swing.JTable tblEnrolled;
    // End of variables declaration//GEN-END:variables

    //populate the Available table for the selected semester
    private void loadAvailable() {
        DefaultTableModel m = (DefaultTableModel) tblAvailable1.getModel();
        m.setRowCount(0);

        String sem = String.valueOf(cmbSemester.getSelectedItem());
        CourseSchedule cs = scheduleFor(sem);
        if (cs == null) return;

        for (CourseOffer co : cs.getCourseOfferList()) {
            String num  = co.getCourseNumber();
            String name = co.getSubjectCourse().getName();
            int left    = seatsLeft(co);
            m.addRow(new Object[]{ num, name, left });
        }
    }

    //populate My Enrollments for the selected semester
    private void loadEnrolled() {
        DefaultTableModel m = (DefaultTableModel) tblEnrolled.getModel();
        m.setRowCount(0);

        String sem = String.valueOf(cmbSemester.getSelectedItem());
        StudentProfile sp = getOrCreateModelStudent();
        CourseLoad cl = sp.getCourseLoadBySemester(sem); // from our StudentProfile

        if (cl == null) return;

        for (SeatAssignment sa : cl.getSeatAssignments()) {
            CourseOffer co = sa.getCourseOffer();
            String num  = co.getCourseNumber();
            String name = co.getSubjectCourse().getName();
            m.addRow(new Object[]{num, name});
        
        }
    }

    private StudentProfile getOrCreateModelStudent() {
        PersonDirectory pd = dept.getPersonDirectory();
        Person mp = pd.findPerson(personId);
        if (mp == null) mp = pd.newPerson(personId);

        StudentDirectory sd = dept.getStudentDirectory();
        StudentProfile sp = sd.findStudent(personId);
        if (sp == null) sp = sd.newStudentProfile(mp);
        return sp;
        }
    
}
